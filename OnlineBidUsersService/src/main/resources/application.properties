spring.data.mongodb.uri=mongodb://localhost:27017/online_bid
logging.level.org.springframework.data.mongodb.core.ReactiveMongoTemplate=DEBUG

# pass as param in start up command or use 0
server.port=${PORT:0}
spring.application.name=user-ws

# Discovery Service Config
eureka.client.serviceUrl.defaultZone=http://localhost:8010/eureka/
## or syntax
eureka.instance.instance-id=${spring.application.name}:${spring.application.instance_id:${random.value}}

# spring.devtools.restart.enabled=true

# Config H2
# spring.h2.console.enabled=true
# spring.h2.console.settings.web-allow-others=true

# will not destroy the previous data
# spring.jpa.hibernate.ddl-auto=update

gateway.ip=192.168.1.10


springbootwebfluxjjwt.password.encoder.secret=mysecret
springbootwebfluxjjwt.password.encoder.iteration=33
springbootwebfluxjjwt.password.encoder.keyLength=256

springbootwebfluxjjwt.jjwt.secret=ThisIsSecretForJWTHS512SignatureAlgorithmThatMUSTHave512bitsKeySize
springbootwebfluxjjwt.jjwt.expiration=28800


# Config RabbitMQ
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# Config Actuator
management.endpoints.web.exposure.include=mappings

# enable logging for feign client
logging.level.guru.springframework.photoAppApiUsers.data.AlbumServiceClient=DEBUG

# Config Netflix Hystrix Circuit Breaker
feign.hystrix.enabled=true

# Config Spring Cloud Sleuth + Zipkin
# Sleuth: trace http request between mircoservices and add trace id + span id
# Zipkin: receive the info for dashboard and displaying / analysis
# in log: [user-ws,ced89cb184594300,ced89cb184594300,true] => [current_service_name, trace_id, span_id, should_send_to_zipkin]
spring.zipkin.base-url=http://localhost:9411
# zipkin can receive info using http / rabbitmq / kafka
spring.zipkin.sender.type=web
# By default sleuth does not send any info to zipkin, so set sampler probability to 1 to send all
spring.sleuth.sampler.probability=1

# output log to file
logging.file.name=users-ws.log